# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.pointing_pattern_parameters_inner import PointingPatternParametersInner
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.pointing_pattern_parameters_inner import PointingPatternParametersInner  # noqa: E501

class PointingPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, parameters=None):  # noqa: E501
        """PointingPattern - a model defined in OpenAPI

        :param active: The active of this PointingPattern.  # noqa: E501
        :type active: str
        :param parameters: The parameters of this PointingPattern.  # noqa: E501
        :type parameters: List[PointingPatternParametersInner]
        """
        self.openapi_types = {
            'active': str,
            'parameters': List[PointingPatternParametersInner]
        }

        self.attribute_map = {
            'active': 'active',
            'parameters': 'parameters'
        }

        self._active = active
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'PointingPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointingPattern of this PointingPattern.  # noqa: E501
        :rtype: PointingPattern
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this PointingPattern.


        :return: The active of this PointingPattern.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PointingPattern.


        :param active: The active of this PointingPattern.
        :type active: str
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def parameters(self):
        """Gets the parameters of this PointingPattern.


        :return: The parameters of this PointingPattern.
        :rtype: List[PointingPatternParametersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PointingPattern.


        :param parameters: The parameters of this PointingPattern.
        :type parameters: List[PointingPatternParametersInner]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
