# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.cross_scan_parameters import CrossScanParameters
from ska_oso_pdm.generated.models.five_point_parameters import FivePointParameters
from ska_oso_pdm.generated.models.raster_parameters import RasterParameters
from ska_oso_pdm.generated.models.single_point_parameters import SinglePointParameters
from ska_oso_pdm.generated.models.star_raster_parameters import StarRasterParameters
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.cross_scan_parameters import CrossScanParameters  # noqa: E501
from ska_oso_pdm.generated.models.five_point_parameters import FivePointParameters  # noqa: E501
from ska_oso_pdm.generated.models.raster_parameters import RasterParameters  # noqa: E501
from ska_oso_pdm.generated.models.single_point_parameters import SinglePointParameters  # noqa: E501
from ska_oso_pdm.generated.models.star_raster_parameters import StarRasterParameters  # noqa: E501

class PointingPatternParametersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, offset_x_arcsec=None, offset_y_arcsec=None, offset_arcsec=None, row_length_arcsec=None, row_offset_arcsec=None, n_rows=None, pa=None, unidirectional=None, row_offset_angle=None):  # noqa: E501
        """PointingPatternParametersInner - a model defined in OpenAPI

        :param kind: The kind of this PointingPatternParametersInner.  # noqa: E501
        :type kind: str
        :param offset_x_arcsec: The offset_x_arcsec of this PointingPatternParametersInner.  # noqa: E501
        :type offset_x_arcsec: float
        :param offset_y_arcsec: The offset_y_arcsec of this PointingPatternParametersInner.  # noqa: E501
        :type offset_y_arcsec: float
        :param offset_arcsec: The offset_arcsec of this PointingPatternParametersInner.  # noqa: E501
        :type offset_arcsec: float
        :param row_length_arcsec: The row_length_arcsec of this PointingPatternParametersInner.  # noqa: E501
        :type row_length_arcsec: float
        :param row_offset_arcsec: The row_offset_arcsec of this PointingPatternParametersInner.  # noqa: E501
        :type row_offset_arcsec: float
        :param n_rows: The n_rows of this PointingPatternParametersInner.  # noqa: E501
        :type n_rows: int
        :param pa: The pa of this PointingPatternParametersInner.  # noqa: E501
        :type pa: float
        :param unidirectional: The unidirectional of this PointingPatternParametersInner.  # noqa: E501
        :type unidirectional: bool
        :param row_offset_angle: The row_offset_angle of this PointingPatternParametersInner.  # noqa: E501
        :type row_offset_angle: float
        """
        self.openapi_types = {
            'kind': str,
            'offset_x_arcsec': float,
            'offset_y_arcsec': float,
            'offset_arcsec': float,
            'row_length_arcsec': float,
            'row_offset_arcsec': float,
            'n_rows': int,
            'pa': float,
            'unidirectional': bool,
            'row_offset_angle': float
        }

        self.attribute_map = {
            'kind': 'kind',
            'offset_x_arcsec': 'offset_x_arcsec',
            'offset_y_arcsec': 'offset_y_arcsec',
            'offset_arcsec': 'offset_arcsec',
            'row_length_arcsec': 'row_length_arcsec',
            'row_offset_arcsec': 'row_offset_arcsec',
            'n_rows': 'n_rows',
            'pa': 'pa',
            'unidirectional': 'unidirectional',
            'row_offset_angle': 'row_offset_angle'
        }

        self._kind = kind
        self._offset_x_arcsec = offset_x_arcsec
        self._offset_y_arcsec = offset_y_arcsec
        self._offset_arcsec = offset_arcsec
        self._row_length_arcsec = row_length_arcsec
        self._row_offset_arcsec = row_offset_arcsec
        self._n_rows = n_rows
        self._pa = pa
        self._unidirectional = unidirectional
        self._row_offset_angle = row_offset_angle

    @classmethod
    def from_dict(cls, dikt) -> 'PointingPatternParametersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointingPattern_parameters_inner of this PointingPatternParametersInner.  # noqa: E501
        :rtype: PointingPatternParametersInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this PointingPatternParametersInner.


        :return: The kind of this PointingPatternParametersInner.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PointingPatternParametersInner.


        :param kind: The kind of this PointingPatternParametersInner.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def offset_x_arcsec(self):
        """Gets the offset_x_arcsec of this PointingPatternParametersInner.


        :return: The offset_x_arcsec of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._offset_x_arcsec

    @offset_x_arcsec.setter
    def offset_x_arcsec(self, offset_x_arcsec):
        """Sets the offset_x_arcsec of this PointingPatternParametersInner.


        :param offset_x_arcsec: The offset_x_arcsec of this PointingPatternParametersInner.
        :type offset_x_arcsec: float
        """
        if offset_x_arcsec is None:
            raise ValueError("Invalid value for `offset_x_arcsec`, must not be `None`")  # noqa: E501

        self._offset_x_arcsec = offset_x_arcsec

    @property
    def offset_y_arcsec(self):
        """Gets the offset_y_arcsec of this PointingPatternParametersInner.


        :return: The offset_y_arcsec of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._offset_y_arcsec

    @offset_y_arcsec.setter
    def offset_y_arcsec(self, offset_y_arcsec):
        """Sets the offset_y_arcsec of this PointingPatternParametersInner.


        :param offset_y_arcsec: The offset_y_arcsec of this PointingPatternParametersInner.
        :type offset_y_arcsec: float
        """
        if offset_y_arcsec is None:
            raise ValueError("Invalid value for `offset_y_arcsec`, must not be `None`")  # noqa: E501

        self._offset_y_arcsec = offset_y_arcsec

    @property
    def offset_arcsec(self):
        """Gets the offset_arcsec of this PointingPatternParametersInner.


        :return: The offset_arcsec of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._offset_arcsec

    @offset_arcsec.setter
    def offset_arcsec(self, offset_arcsec):
        """Sets the offset_arcsec of this PointingPatternParametersInner.


        :param offset_arcsec: The offset_arcsec of this PointingPatternParametersInner.
        :type offset_arcsec: float
        """
        if offset_arcsec is None:
            raise ValueError("Invalid value for `offset_arcsec`, must not be `None`")  # noqa: E501

        self._offset_arcsec = offset_arcsec

    @property
    def row_length_arcsec(self):
        """Gets the row_length_arcsec of this PointingPatternParametersInner.


        :return: The row_length_arcsec of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._row_length_arcsec

    @row_length_arcsec.setter
    def row_length_arcsec(self, row_length_arcsec):
        """Sets the row_length_arcsec of this PointingPatternParametersInner.


        :param row_length_arcsec: The row_length_arcsec of this PointingPatternParametersInner.
        :type row_length_arcsec: float
        """
        if row_length_arcsec is None:
            raise ValueError("Invalid value for `row_length_arcsec`, must not be `None`")  # noqa: E501

        self._row_length_arcsec = row_length_arcsec

    @property
    def row_offset_arcsec(self):
        """Gets the row_offset_arcsec of this PointingPatternParametersInner.


        :return: The row_offset_arcsec of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._row_offset_arcsec

    @row_offset_arcsec.setter
    def row_offset_arcsec(self, row_offset_arcsec):
        """Sets the row_offset_arcsec of this PointingPatternParametersInner.


        :param row_offset_arcsec: The row_offset_arcsec of this PointingPatternParametersInner.
        :type row_offset_arcsec: float
        """
        if row_offset_arcsec is None:
            raise ValueError("Invalid value for `row_offset_arcsec`, must not be `None`")  # noqa: E501

        self._row_offset_arcsec = row_offset_arcsec

    @property
    def n_rows(self):
        """Gets the n_rows of this PointingPatternParametersInner.


        :return: The n_rows of this PointingPatternParametersInner.
        :rtype: int
        """
        return self._n_rows

    @n_rows.setter
    def n_rows(self, n_rows):
        """Sets the n_rows of this PointingPatternParametersInner.


        :param n_rows: The n_rows of this PointingPatternParametersInner.
        :type n_rows: int
        """
        if n_rows is None:
            raise ValueError("Invalid value for `n_rows`, must not be `None`")  # noqa: E501

        self._n_rows = n_rows

    @property
    def pa(self):
        """Gets the pa of this PointingPatternParametersInner.


        :return: The pa of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._pa

    @pa.setter
    def pa(self, pa):
        """Sets the pa of this PointingPatternParametersInner.


        :param pa: The pa of this PointingPatternParametersInner.
        :type pa: float
        """
        if pa is None:
            raise ValueError("Invalid value for `pa`, must not be `None`")  # noqa: E501

        self._pa = pa

    @property
    def unidirectional(self):
        """Gets the unidirectional of this PointingPatternParametersInner.


        :return: The unidirectional of this PointingPatternParametersInner.
        :rtype: bool
        """
        return self._unidirectional

    @unidirectional.setter
    def unidirectional(self, unidirectional):
        """Sets the unidirectional of this PointingPatternParametersInner.


        :param unidirectional: The unidirectional of this PointingPatternParametersInner.
        :type unidirectional: bool
        """
        if unidirectional is None:
            raise ValueError("Invalid value for `unidirectional`, must not be `None`")  # noqa: E501

        self._unidirectional = unidirectional

    @property
    def row_offset_angle(self):
        """Gets the row_offset_angle of this PointingPatternParametersInner.


        :return: The row_offset_angle of this PointingPatternParametersInner.
        :rtype: float
        """
        return self._row_offset_angle

    @row_offset_angle.setter
    def row_offset_angle(self, row_offset_angle):
        """Sets the row_offset_angle of this PointingPatternParametersInner.


        :param row_offset_angle: The row_offset_angle of this PointingPatternParametersInner.
        :type row_offset_angle: float
        """
        if row_offset_angle is None:
            raise ValueError("Invalid value for `row_offset_angle`, must not be `None`")  # noqa: E501

        self._row_offset_angle = row_offset_angle
