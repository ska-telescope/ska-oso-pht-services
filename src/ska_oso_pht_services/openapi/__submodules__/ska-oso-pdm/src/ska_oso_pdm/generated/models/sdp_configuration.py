# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.processing_block import ProcessingBlock
from ska_oso_pdm.generated.models.scan_type import ScanType
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.processing_block import ProcessingBlock  # noqa: E501
from ska_oso_pdm.generated.models.scan_type import ScanType  # noqa: E501

class SDPConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scan_types=None, eb_id=None, processing_blocks=None, max_length=None):  # noqa: E501
        """SDPConfiguration - a model defined in OpenAPI

        :param scan_types: The scan_types of this SDPConfiguration.  # noqa: E501
        :type scan_types: List[ScanType]
        :param eb_id: The eb_id of this SDPConfiguration.  # noqa: E501
        :type eb_id: str
        :param processing_blocks: The processing_blocks of this SDPConfiguration.  # noqa: E501
        :type processing_blocks: List[ProcessingBlock]
        :param max_length: The max_length of this SDPConfiguration.  # noqa: E501
        :type max_length: float
        """
        self.openapi_types = {
            'scan_types': List[ScanType],
            'eb_id': str,
            'processing_blocks': List[ProcessingBlock],
            'max_length': float
        }

        self.attribute_map = {
            'scan_types': 'scan_types',
            'eb_id': 'eb_id',
            'processing_blocks': 'processing_blocks',
            'max_length': 'max_length'
        }

        self._scan_types = scan_types
        self._eb_id = eb_id
        self._processing_blocks = processing_blocks
        self._max_length = max_length

    @classmethod
    def from_dict(cls, dikt) -> 'SDPConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SDPConfiguration of this SDPConfiguration.  # noqa: E501
        :rtype: SDPConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scan_types(self):
        """Gets the scan_types of this SDPConfiguration.


        :return: The scan_types of this SDPConfiguration.
        :rtype: List[ScanType]
        """
        return self._scan_types

    @scan_types.setter
    def scan_types(self, scan_types):
        """Sets the scan_types of this SDPConfiguration.


        :param scan_types: The scan_types of this SDPConfiguration.
        :type scan_types: List[ScanType]
        """

        self._scan_types = scan_types

    @property
    def eb_id(self):
        """Gets the eb_id of this SDPConfiguration.


        :return: The eb_id of this SDPConfiguration.
        :rtype: str
        """
        return self._eb_id

    @eb_id.setter
    def eb_id(self, eb_id):
        """Sets the eb_id of this SDPConfiguration.


        :param eb_id: The eb_id of this SDPConfiguration.
        :type eb_id: str
        """
        if eb_id is None:
            raise ValueError("Invalid value for `eb_id`, must not be `None`")  # noqa: E501

        self._eb_id = eb_id

    @property
    def processing_blocks(self):
        """Gets the processing_blocks of this SDPConfiguration.


        :return: The processing_blocks of this SDPConfiguration.
        :rtype: List[ProcessingBlock]
        """
        return self._processing_blocks

    @processing_blocks.setter
    def processing_blocks(self, processing_blocks):
        """Sets the processing_blocks of this SDPConfiguration.


        :param processing_blocks: The processing_blocks of this SDPConfiguration.
        :type processing_blocks: List[ProcessingBlock]
        """

        self._processing_blocks = processing_blocks

    @property
    def max_length(self):
        """Gets the max_length of this SDPConfiguration.


        :return: The max_length of this SDPConfiguration.
        :rtype: float
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this SDPConfiguration.


        :param max_length: The max_length of this SDPConfiguration.
        :type max_length: float
        """
        if max_length is None:
            raise ValueError("Invalid value for `max_length`, must not be `None`")  # noqa: E501

        self._max_length = max_length
