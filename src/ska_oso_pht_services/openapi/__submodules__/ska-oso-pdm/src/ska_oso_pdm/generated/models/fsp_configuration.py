# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class FSPConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency_slice_id=None, fsp_id=None, output_link_map=None, function_mode=None, zoom_factor=None, integration_factor=None, zoom_window_tuning=None, channel_averaging_map=None, channel_offset=None):  # noqa: E501
        """FSPConfiguration - a model defined in OpenAPI

        :param frequency_slice_id: The frequency_slice_id of this FSPConfiguration.  # noqa: E501
        :type frequency_slice_id: int
        :param fsp_id: The fsp_id of this FSPConfiguration.  # noqa: E501
        :type fsp_id: int
        :param output_link_map: The output_link_map of this FSPConfiguration.  # noqa: E501
        :type output_link_map: List[List[int]]
        :param function_mode: The function_mode of this FSPConfiguration.  # noqa: E501
        :type function_mode: str
        :param zoom_factor: The zoom_factor of this FSPConfiguration.  # noqa: E501
        :type zoom_factor: int
        :param integration_factor: The integration_factor of this FSPConfiguration.  # noqa: E501
        :type integration_factor: int
        :param zoom_window_tuning: The zoom_window_tuning of this FSPConfiguration.  # noqa: E501
        :type zoom_window_tuning: int
        :param channel_averaging_map: The channel_averaging_map of this FSPConfiguration.  # noqa: E501
        :type channel_averaging_map: List[List[int]]
        :param channel_offset: The channel_offset of this FSPConfiguration.  # noqa: E501
        :type channel_offset: int
        """
        self.openapi_types = {
            'frequency_slice_id': int,
            'fsp_id': int,
            'output_link_map': List[List[int]],
            'function_mode': str,
            'zoom_factor': int,
            'integration_factor': int,
            'zoom_window_tuning': int,
            'channel_averaging_map': List[List[int]],
            'channel_offset': int
        }

        self.attribute_map = {
            'frequency_slice_id': 'frequency_slice_id',
            'fsp_id': 'fsp_id',
            'output_link_map': 'output_link_map',
            'function_mode': 'function_mode',
            'zoom_factor': 'zoom_factor',
            'integration_factor': 'integration_factor',
            'zoom_window_tuning': 'zoom_window_tuning',
            'channel_averaging_map': 'channel_averaging_map',
            'channel_offset': 'channel_offset'
        }

        self._frequency_slice_id = frequency_slice_id
        self._fsp_id = fsp_id
        self._output_link_map = output_link_map
        self._function_mode = function_mode
        self._zoom_factor = zoom_factor
        self._integration_factor = integration_factor
        self._zoom_window_tuning = zoom_window_tuning
        self._channel_averaging_map = channel_averaging_map
        self._channel_offset = channel_offset

    @classmethod
    def from_dict(cls, dikt) -> 'FSPConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FSPConfiguration of this FSPConfiguration.  # noqa: E501
        :rtype: FSPConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency_slice_id(self):
        """Gets the frequency_slice_id of this FSPConfiguration.


        :return: The frequency_slice_id of this FSPConfiguration.
        :rtype: int
        """
        return self._frequency_slice_id

    @frequency_slice_id.setter
    def frequency_slice_id(self, frequency_slice_id):
        """Sets the frequency_slice_id of this FSPConfiguration.


        :param frequency_slice_id: The frequency_slice_id of this FSPConfiguration.
        :type frequency_slice_id: int
        """
        if frequency_slice_id is None:
            raise ValueError("Invalid value for `frequency_slice_id`, must not be `None`")  # noqa: E501

        self._frequency_slice_id = frequency_slice_id

    @property
    def fsp_id(self):
        """Gets the fsp_id of this FSPConfiguration.


        :return: The fsp_id of this FSPConfiguration.
        :rtype: int
        """
        return self._fsp_id

    @fsp_id.setter
    def fsp_id(self, fsp_id):
        """Sets the fsp_id of this FSPConfiguration.


        :param fsp_id: The fsp_id of this FSPConfiguration.
        :type fsp_id: int
        """
        if fsp_id is None:
            raise ValueError("Invalid value for `fsp_id`, must not be `None`")  # noqa: E501

        self._fsp_id = fsp_id

    @property
    def output_link_map(self):
        """Gets the output_link_map of this FSPConfiguration.


        :return: The output_link_map of this FSPConfiguration.
        :rtype: List[List[int]]
        """
        return self._output_link_map

    @output_link_map.setter
    def output_link_map(self, output_link_map):
        """Sets the output_link_map of this FSPConfiguration.


        :param output_link_map: The output_link_map of this FSPConfiguration.
        :type output_link_map: List[List[int]]
        """

        self._output_link_map = output_link_map

    @property
    def function_mode(self):
        """Gets the function_mode of this FSPConfiguration.


        :return: The function_mode of this FSPConfiguration.
        :rtype: str
        """
        return self._function_mode

    @function_mode.setter
    def function_mode(self, function_mode):
        """Sets the function_mode of this FSPConfiguration.


        :param function_mode: The function_mode of this FSPConfiguration.
        :type function_mode: str
        """
        allowed_values = ["CORR", "PSS-BF", "PST-BF", "VLBI"]  # noqa: E501
        if function_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `function_mode` ({0}), must be one of {1}"
                .format(function_mode, allowed_values)
            )

        self._function_mode = function_mode

    @property
    def zoom_factor(self):
        """Gets the zoom_factor of this FSPConfiguration.


        :return: The zoom_factor of this FSPConfiguration.
        :rtype: int
        """
        return self._zoom_factor

    @zoom_factor.setter
    def zoom_factor(self, zoom_factor):
        """Sets the zoom_factor of this FSPConfiguration.


        :param zoom_factor: The zoom_factor of this FSPConfiguration.
        :type zoom_factor: int
        """
        if zoom_factor is None:
            raise ValueError("Invalid value for `zoom_factor`, must not be `None`")  # noqa: E501

        self._zoom_factor = zoom_factor

    @property
    def integration_factor(self):
        """Gets the integration_factor of this FSPConfiguration.


        :return: The integration_factor of this FSPConfiguration.
        :rtype: int
        """
        return self._integration_factor

    @integration_factor.setter
    def integration_factor(self, integration_factor):
        """Sets the integration_factor of this FSPConfiguration.


        :param integration_factor: The integration_factor of this FSPConfiguration.
        :type integration_factor: int
        """
        if integration_factor is None:
            raise ValueError("Invalid value for `integration_factor`, must not be `None`")  # noqa: E501

        self._integration_factor = integration_factor

    @property
    def zoom_window_tuning(self):
        """Gets the zoom_window_tuning of this FSPConfiguration.


        :return: The zoom_window_tuning of this FSPConfiguration.
        :rtype: int
        """
        return self._zoom_window_tuning

    @zoom_window_tuning.setter
    def zoom_window_tuning(self, zoom_window_tuning):
        """Sets the zoom_window_tuning of this FSPConfiguration.


        :param zoom_window_tuning: The zoom_window_tuning of this FSPConfiguration.
        :type zoom_window_tuning: int
        """

        self._zoom_window_tuning = zoom_window_tuning

    @property
    def channel_averaging_map(self):
        """Gets the channel_averaging_map of this FSPConfiguration.


        :return: The channel_averaging_map of this FSPConfiguration.
        :rtype: List[List[int]]
        """
        return self._channel_averaging_map

    @channel_averaging_map.setter
    def channel_averaging_map(self, channel_averaging_map):
        """Sets the channel_averaging_map of this FSPConfiguration.


        :param channel_averaging_map: The channel_averaging_map of this FSPConfiguration.
        :type channel_averaging_map: List[List[int]]
        """

        self._channel_averaging_map = channel_averaging_map

    @property
    def channel_offset(self):
        """Gets the channel_offset of this FSPConfiguration.


        :return: The channel_offset of this FSPConfiguration.
        :rtype: int
        """
        return self._channel_offset

    @channel_offset.setter
    def channel_offset(self, channel_offset):
        """Sets the channel_offset of this FSPConfiguration.


        :param channel_offset: The channel_offset of this FSPConfiguration.
        :type channel_offset: int
        """

        self._channel_offset = channel_offset
