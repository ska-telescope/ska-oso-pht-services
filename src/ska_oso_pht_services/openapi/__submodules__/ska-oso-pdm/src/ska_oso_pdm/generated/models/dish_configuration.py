# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class DishConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, receiver_band=None, dish_configuration_id=None):  # noqa: E501
        """DishConfiguration - a model defined in OpenAPI

        :param receiver_band: The receiver_band of this DishConfiguration.  # noqa: E501
        :type receiver_band: str
        :param dish_configuration_id: The dish_configuration_id of this DishConfiguration.  # noqa: E501
        :type dish_configuration_id: str
        """
        self.openapi_types = {
            'receiver_band': str,
            'dish_configuration_id': str
        }

        self.attribute_map = {
            'receiver_band': 'receiver_band',
            'dish_configuration_id': 'dish_configuration_id'
        }

        self._receiver_band = receiver_band
        self._dish_configuration_id = dish_configuration_id

    @classmethod
    def from_dict(cls, dikt) -> 'DishConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DishConfiguration of this DishConfiguration.  # noqa: E501
        :rtype: DishConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def receiver_band(self):
        """Gets the receiver_band of this DishConfiguration.


        :return: The receiver_band of this DishConfiguration.
        :rtype: str
        """
        return self._receiver_band

    @receiver_band.setter
    def receiver_band(self, receiver_band):
        """Sets the receiver_band of this DishConfiguration.


        :param receiver_band: The receiver_band of this DishConfiguration.
        :type receiver_band: str
        """
        allowed_values = ["1", "2", "5a", "5b"]  # noqa: E501
        if receiver_band not in allowed_values:
            raise ValueError(
                "Invalid value for `receiver_band` ({0}), must be one of {1}"
                .format(receiver_band, allowed_values)
            )

        self._receiver_band = receiver_band

    @property
    def dish_configuration_id(self):
        """Gets the dish_configuration_id of this DishConfiguration.


        :return: The dish_configuration_id of this DishConfiguration.
        :rtype: str
        """
        return self._dish_configuration_id

    @dish_configuration_id.setter
    def dish_configuration_id(self, dish_configuration_id):
        """Sets the dish_configuration_id of this DishConfiguration.


        :param dish_configuration_id: The dish_configuration_id of this DishConfiguration.
        :type dish_configuration_id: str
        """
        if dish_configuration_id is None:
            raise ValueError("Invalid value for `dish_configuration_id`, must not be `None`")  # noqa: E501

        self._dish_configuration_id = dish_configuration_id
