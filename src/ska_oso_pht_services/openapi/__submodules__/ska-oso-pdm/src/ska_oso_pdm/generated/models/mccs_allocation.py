# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class MCCSAllocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, station_ids=None, channel_blocks=None, subarray_beam_ids=None):  # noqa: E501
        """MCCSAllocation - a model defined in OpenAPI

        :param station_ids: The station_ids of this MCCSAllocation.  # noqa: E501
        :type station_ids: List[List[int]]
        :param channel_blocks: The channel_blocks of this MCCSAllocation.  # noqa: E501
        :type channel_blocks: List[int]
        :param subarray_beam_ids: The subarray_beam_ids of this MCCSAllocation.  # noqa: E501
        :type subarray_beam_ids: List[str]
        """
        self.openapi_types = {
            'station_ids': List[List[int]],
            'channel_blocks': List[int],
            'subarray_beam_ids': List[str]
        }

        self.attribute_map = {
            'station_ids': 'station_ids',
            'channel_blocks': 'channel_blocks',
            'subarray_beam_ids': 'subarray_beam_ids'
        }

        self._station_ids = station_ids
        self._channel_blocks = channel_blocks
        self._subarray_beam_ids = subarray_beam_ids

    @classmethod
    def from_dict(cls, dikt) -> 'MCCSAllocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MCCSAllocation of this MCCSAllocation.  # noqa: E501
        :rtype: MCCSAllocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def station_ids(self):
        """Gets the station_ids of this MCCSAllocation.


        :return: The station_ids of this MCCSAllocation.
        :rtype: List[List[int]]
        """
        return self._station_ids

    @station_ids.setter
    def station_ids(self, station_ids):
        """Sets the station_ids of this MCCSAllocation.


        :param station_ids: The station_ids of this MCCSAllocation.
        :type station_ids: List[List[int]]
        """
        if station_ids is None:
            raise ValueError("Invalid value for `station_ids`, must not be `None`")  # noqa: E501

        self._station_ids = station_ids

    @property
    def channel_blocks(self):
        """Gets the channel_blocks of this MCCSAllocation.


        :return: The channel_blocks of this MCCSAllocation.
        :rtype: List[int]
        """
        return self._channel_blocks

    @channel_blocks.setter
    def channel_blocks(self, channel_blocks):
        """Sets the channel_blocks of this MCCSAllocation.


        :param channel_blocks: The channel_blocks of this MCCSAllocation.
        :type channel_blocks: List[int]
        """
        if channel_blocks is None:
            raise ValueError("Invalid value for `channel_blocks`, must not be `None`")  # noqa: E501

        self._channel_blocks = channel_blocks

    @property
    def subarray_beam_ids(self):
        """Gets the subarray_beam_ids of this MCCSAllocation.


        :return: The subarray_beam_ids of this MCCSAllocation.
        :rtype: List[str]
        """
        return self._subarray_beam_ids

    @subarray_beam_ids.setter
    def subarray_beam_ids(self, subarray_beam_ids):
        """Sets the subarray_beam_ids of this MCCSAllocation.


        :param subarray_beam_ids: The subarray_beam_ids of this MCCSAllocation.
        :type subarray_beam_ids: List[str]
        """
        if subarray_beam_ids is None:
            raise ValueError("Invalid value for `subarray_beam_ids`, must not be `None`")  # noqa: E501

        self._subarray_beam_ids = subarray_beam_ids
