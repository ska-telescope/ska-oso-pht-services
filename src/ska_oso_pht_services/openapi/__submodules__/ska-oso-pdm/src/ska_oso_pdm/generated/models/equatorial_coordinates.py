# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.coordinates import Coordinates
from ska_oso_pdm.generated.models.equatorial_coordinates_reference_frame import EquatorialCoordinatesReferenceFrame
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.coordinates import Coordinates  # noqa: E501
from ska_oso_pdm.generated.models.equatorial_coordinates_reference_frame import EquatorialCoordinatesReferenceFrame  # noqa: E501

class EquatorialCoordinates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, ra=None, dec=None, reference_frame=None, unit=None):  # noqa: E501
        """EquatorialCoordinates - a model defined in OpenAPI

        :param kind: The kind of this EquatorialCoordinates.  # noqa: E501
        :type kind: str
        :param ra: The ra of this EquatorialCoordinates.  # noqa: E501
        :type ra: str
        :param dec: The dec of this EquatorialCoordinates.  # noqa: E501
        :type dec: str
        :param reference_frame: The reference_frame of this EquatorialCoordinates.  # noqa: E501
        :type reference_frame: EquatorialCoordinatesReferenceFrame
        :param unit: The unit of this EquatorialCoordinates.  # noqa: E501
        :type unit: List[str]
        """
        self.openapi_types = {
            'kind': str,
            'ra': str,
            'dec': str,
            'reference_frame': EquatorialCoordinatesReferenceFrame,
            'unit': List[str]
        }

        self.attribute_map = {
            'kind': 'kind',
            'ra': 'ra',
            'dec': 'dec',
            'reference_frame': 'reference_frame',
            'unit': 'unit'
        }

        self._kind = kind
        self._ra = ra
        self._dec = dec
        self._reference_frame = reference_frame
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'EquatorialCoordinates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EquatorialCoordinates of this EquatorialCoordinates.  # noqa: E501
        :rtype: EquatorialCoordinates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this EquatorialCoordinates.


        :return: The kind of this EquatorialCoordinates.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EquatorialCoordinates.


        :param kind: The kind of this EquatorialCoordinates.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def ra(self):
        """Gets the ra of this EquatorialCoordinates.


        :return: The ra of this EquatorialCoordinates.
        :rtype: str
        """
        return self._ra

    @ra.setter
    def ra(self, ra):
        """Sets the ra of this EquatorialCoordinates.


        :param ra: The ra of this EquatorialCoordinates.
        :type ra: str
        """
        if ra is None:
            raise ValueError("Invalid value for `ra`, must not be `None`")  # noqa: E501

        self._ra = ra

    @property
    def dec(self):
        """Gets the dec of this EquatorialCoordinates.


        :return: The dec of this EquatorialCoordinates.
        :rtype: str
        """
        return self._dec

    @dec.setter
    def dec(self, dec):
        """Sets the dec of this EquatorialCoordinates.


        :param dec: The dec of this EquatorialCoordinates.
        :type dec: str
        """
        if dec is None:
            raise ValueError("Invalid value for `dec`, must not be `None`")  # noqa: E501

        self._dec = dec

    @property
    def reference_frame(self):
        """Gets the reference_frame of this EquatorialCoordinates.


        :return: The reference_frame of this EquatorialCoordinates.
        :rtype: EquatorialCoordinatesReferenceFrame
        """
        return self._reference_frame

    @reference_frame.setter
    def reference_frame(self, reference_frame):
        """Sets the reference_frame of this EquatorialCoordinates.


        :param reference_frame: The reference_frame of this EquatorialCoordinates.
        :type reference_frame: EquatorialCoordinatesReferenceFrame
        """
        if reference_frame is None:
            raise ValueError("Invalid value for `reference_frame`, must not be `None`")  # noqa: E501

        self._reference_frame = reference_frame

    @property
    def unit(self):
        """Gets the unit of this EquatorialCoordinates.


        :return: The unit of this EquatorialCoordinates.
        :rtype: List[str]
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EquatorialCoordinates.


        :param unit: The unit of this EquatorialCoordinates.
        :type unit: List[str]
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit
