# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.pb_dependency import PbDependency
from ska_oso_pdm.generated.models.workflow import Workflow
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.pb_dependency import PbDependency  # noqa: E501
from ska_oso_pdm.generated.models.workflow import Workflow  # noqa: E501

class ProcessingBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters=None, dependencies=None, workflow=None, pb_id=None):  # noqa: E501
        """ProcessingBlock - a model defined in OpenAPI

        :param parameters: The parameters of this ProcessingBlock.  # noqa: E501
        :type parameters: object
        :param dependencies: The dependencies of this ProcessingBlock.  # noqa: E501
        :type dependencies: List[PbDependency]
        :param workflow: The workflow of this ProcessingBlock.  # noqa: E501
        :type workflow: Workflow
        :param pb_id: The pb_id of this ProcessingBlock.  # noqa: E501
        :type pb_id: str
        """
        self.openapi_types = {
            'parameters': object,
            'dependencies': List[PbDependency],
            'workflow': Workflow,
            'pb_id': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'dependencies': 'dependencies',
            'workflow': 'workflow',
            'pb_id': 'pb_id'
        }

        self._parameters = parameters
        self._dependencies = dependencies
        self._workflow = workflow
        self._pb_id = pb_id

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessingBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessingBlock of this ProcessingBlock.  # noqa: E501
        :rtype: ProcessingBlock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this ProcessingBlock.


        :return: The parameters of this ProcessingBlock.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ProcessingBlock.


        :param parameters: The parameters of this ProcessingBlock.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def dependencies(self):
        """Gets the dependencies of this ProcessingBlock.


        :return: The dependencies of this ProcessingBlock.
        :rtype: List[PbDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ProcessingBlock.


        :param dependencies: The dependencies of this ProcessingBlock.
        :type dependencies: List[PbDependency]
        """

        self._dependencies = dependencies

    @property
    def workflow(self):
        """Gets the workflow of this ProcessingBlock.


        :return: The workflow of this ProcessingBlock.
        :rtype: Workflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this ProcessingBlock.


        :param workflow: The workflow of this ProcessingBlock.
        :type workflow: Workflow
        """

        self._workflow = workflow

    @property
    def pb_id(self):
        """Gets the pb_id of this ProcessingBlock.


        :return: The pb_id of this ProcessingBlock.
        :rtype: str
        """
        return self._pb_id

    @pb_id.setter
    def pb_id(self, pb_id):
        """Sets the pb_id of this ProcessingBlock.


        :param pb_id: The pb_id of this ProcessingBlock.
        :type pb_id: str
        """
        if pb_id is None:
            raise ValueError("Invalid value for `pb_id`, must not be `None`")  # noqa: E501

        self._pb_id = pb_id
