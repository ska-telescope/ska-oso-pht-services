# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class TargetBeamConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_beam_id=None, target=None, subarray_beam_configuration=None):  # noqa: E501
        """TargetBeamConfiguration - a model defined in OpenAPI

        :param target_beam_id: The target_beam_id of this TargetBeamConfiguration.  # noqa: E501
        :type target_beam_id: str
        :param target: The target of this TargetBeamConfiguration.  # noqa: E501
        :type target: str
        :param subarray_beam_configuration: The subarray_beam_configuration of this TargetBeamConfiguration.  # noqa: E501
        :type subarray_beam_configuration: str
        """
        self.openapi_types = {
            'target_beam_id': str,
            'target': str,
            'subarray_beam_configuration': str
        }

        self.attribute_map = {
            'target_beam_id': 'target_beam_id',
            'target': 'target',
            'subarray_beam_configuration': 'subarray_beam_configuration'
        }

        self._target_beam_id = target_beam_id
        self._target = target
        self._subarray_beam_configuration = subarray_beam_configuration

    @classmethod
    def from_dict(cls, dikt) -> 'TargetBeamConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TargetBeamConfiguration of this TargetBeamConfiguration.  # noqa: E501
        :rtype: TargetBeamConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_beam_id(self):
        """Gets the target_beam_id of this TargetBeamConfiguration.


        :return: The target_beam_id of this TargetBeamConfiguration.
        :rtype: str
        """
        return self._target_beam_id

    @target_beam_id.setter
    def target_beam_id(self, target_beam_id):
        """Sets the target_beam_id of this TargetBeamConfiguration.


        :param target_beam_id: The target_beam_id of this TargetBeamConfiguration.
        :type target_beam_id: str
        """
        if target_beam_id is None:
            raise ValueError("Invalid value for `target_beam_id`, must not be `None`")  # noqa: E501

        self._target_beam_id = target_beam_id

    @property
    def target(self):
        """Gets the target of this TargetBeamConfiguration.


        :return: The target of this TargetBeamConfiguration.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this TargetBeamConfiguration.


        :param target: The target of this TargetBeamConfiguration.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def subarray_beam_configuration(self):
        """Gets the subarray_beam_configuration of this TargetBeamConfiguration.


        :return: The subarray_beam_configuration of this TargetBeamConfiguration.
        :rtype: str
        """
        return self._subarray_beam_configuration

    @subarray_beam_configuration.setter
    def subarray_beam_configuration(self, subarray_beam_configuration):
        """Sets the subarray_beam_configuration of this TargetBeamConfiguration.


        :param subarray_beam_configuration: The subarray_beam_configuration of this TargetBeamConfiguration.
        :type subarray_beam_configuration: str
        """
        if subarray_beam_configuration is None:
            raise ValueError("Invalid value for `subarray_beam_configuration`, must not be `None`")  # noqa: E501

        self._subarray_beam_configuration = subarray_beam_configuration
