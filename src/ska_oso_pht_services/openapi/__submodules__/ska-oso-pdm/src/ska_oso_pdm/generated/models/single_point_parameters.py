# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters  # noqa: E501

class SinglePointParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, offset_x_arcsec=None, offset_y_arcsec=None):  # noqa: E501
        """SinglePointParameters - a model defined in OpenAPI

        :param kind: The kind of this SinglePointParameters.  # noqa: E501
        :type kind: str
        :param offset_x_arcsec: The offset_x_arcsec of this SinglePointParameters.  # noqa: E501
        :type offset_x_arcsec: float
        :param offset_y_arcsec: The offset_y_arcsec of this SinglePointParameters.  # noqa: E501
        :type offset_y_arcsec: float
        """
        self.openapi_types = {
            'kind': str,
            'offset_x_arcsec': float,
            'offset_y_arcsec': float
        }

        self.attribute_map = {
            'kind': 'kind',
            'offset_x_arcsec': 'offset_x_arcsec',
            'offset_y_arcsec': 'offset_y_arcsec'
        }

        self._kind = kind
        self._offset_x_arcsec = offset_x_arcsec
        self._offset_y_arcsec = offset_y_arcsec

    @classmethod
    def from_dict(cls, dikt) -> 'SinglePointParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SinglePointParameters of this SinglePointParameters.  # noqa: E501
        :rtype: SinglePointParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SinglePointParameters.


        :return: The kind of this SinglePointParameters.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SinglePointParameters.


        :param kind: The kind of this SinglePointParameters.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def offset_x_arcsec(self):
        """Gets the offset_x_arcsec of this SinglePointParameters.


        :return: The offset_x_arcsec of this SinglePointParameters.
        :rtype: float
        """
        return self._offset_x_arcsec

    @offset_x_arcsec.setter
    def offset_x_arcsec(self, offset_x_arcsec):
        """Sets the offset_x_arcsec of this SinglePointParameters.


        :param offset_x_arcsec: The offset_x_arcsec of this SinglePointParameters.
        :type offset_x_arcsec: float
        """
        if offset_x_arcsec is None:
            raise ValueError("Invalid value for `offset_x_arcsec`, must not be `None`")  # noqa: E501

        self._offset_x_arcsec = offset_x_arcsec

    @property
    def offset_y_arcsec(self):
        """Gets the offset_y_arcsec of this SinglePointParameters.


        :return: The offset_y_arcsec of this SinglePointParameters.
        :rtype: float
        """
        return self._offset_y_arcsec

    @offset_y_arcsec.setter
    def offset_y_arcsec(self, offset_y_arcsec):
        """Sets the offset_y_arcsec of this SinglePointParameters.


        :param offset_y_arcsec: The offset_y_arcsec of this SinglePointParameters.
        :type offset_y_arcsec: float
        """
        if offset_y_arcsec is None:
            raise ValueError("Invalid value for `offset_y_arcsec`, must not be `None`")  # noqa: E501

        self._offset_y_arcsec = offset_y_arcsec
