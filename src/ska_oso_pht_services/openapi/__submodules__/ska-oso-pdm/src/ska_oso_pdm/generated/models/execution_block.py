# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.metadata import Metadata
from ska_oso_pdm.generated.models.telescope import Telescope
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.metadata import Metadata  # noqa: E501
from ska_oso_pdm.generated.models.telescope import Telescope  # noqa: E501

class ExecutionBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interface=None, eb_id=None, metadata=None, telescope=None, sbd_id=None, sbd_version=None):  # noqa: E501
        """ExecutionBlock - a model defined in OpenAPI

        :param interface: The interface of this ExecutionBlock.  # noqa: E501
        :type interface: str
        :param eb_id: The eb_id of this ExecutionBlock.  # noqa: E501
        :type eb_id: str
        :param metadata: The metadata of this ExecutionBlock.  # noqa: E501
        :type metadata: Metadata
        :param telescope: The telescope of this ExecutionBlock.  # noqa: E501
        :type telescope: Telescope
        :param sbd_id: The sbd_id of this ExecutionBlock.  # noqa: E501
        :type sbd_id: str
        :param sbd_version: The sbd_version of this ExecutionBlock.  # noqa: E501
        :type sbd_version: int
        """
        self.openapi_types = {
            'interface': str,
            'eb_id': str,
            'metadata': Metadata,
            'telescope': Telescope,
            'sbd_id': str,
            'sbd_version': int
        }

        self.attribute_map = {
            'interface': 'interface',
            'eb_id': 'eb_id',
            'metadata': 'metadata',
            'telescope': 'telescope',
            'sbd_id': 'sbd_id',
            'sbd_version': 'sbd_version'
        }

        self._interface = interface
        self._eb_id = eb_id
        self._metadata = metadata
        self._telescope = telescope
        self._sbd_id = sbd_id
        self._sbd_version = sbd_version

    @classmethod
    def from_dict(cls, dikt) -> 'ExecutionBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecutionBlock of this ExecutionBlock.  # noqa: E501
        :rtype: ExecutionBlock
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface(self):
        """Gets the interface of this ExecutionBlock.


        :return: The interface of this ExecutionBlock.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ExecutionBlock.


        :param interface: The interface of this ExecutionBlock.
        :type interface: str
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def eb_id(self):
        """Gets the eb_id of this ExecutionBlock.


        :return: The eb_id of this ExecutionBlock.
        :rtype: str
        """
        return self._eb_id

    @eb_id.setter
    def eb_id(self, eb_id):
        """Sets the eb_id of this ExecutionBlock.


        :param eb_id: The eb_id of this ExecutionBlock.
        :type eb_id: str
        """
        if eb_id is None:
            raise ValueError("Invalid value for `eb_id`, must not be `None`")  # noqa: E501

        self._eb_id = eb_id

    @property
    def metadata(self):
        """Gets the metadata of this ExecutionBlock.


        :return: The metadata of this ExecutionBlock.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ExecutionBlock.


        :param metadata: The metadata of this ExecutionBlock.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def telescope(self):
        """Gets the telescope of this ExecutionBlock.


        :return: The telescope of this ExecutionBlock.
        :rtype: Telescope
        """
        return self._telescope

    @telescope.setter
    def telescope(self, telescope):
        """Sets the telescope of this ExecutionBlock.


        :param telescope: The telescope of this ExecutionBlock.
        :type telescope: Telescope
        """
        if telescope is None:
            raise ValueError("Invalid value for `telescope`, must not be `None`")  # noqa: E501

        self._telescope = telescope

    @property
    def sbd_id(self):
        """Gets the sbd_id of this ExecutionBlock.


        :return: The sbd_id of this ExecutionBlock.
        :rtype: str
        """
        return self._sbd_id

    @sbd_id.setter
    def sbd_id(self, sbd_id):
        """Sets the sbd_id of this ExecutionBlock.


        :param sbd_id: The sbd_id of this ExecutionBlock.
        :type sbd_id: str
        """

        self._sbd_id = sbd_id

    @property
    def sbd_version(self):
        """Gets the sbd_version of this ExecutionBlock.


        :return: The sbd_version of this ExecutionBlock.
        :rtype: int
        """
        return self._sbd_version

    @sbd_version.setter
    def sbd_version(self, sbd_version):
        """Sets the sbd_version of this ExecutionBlock.


        :param sbd_version: The sbd_version of this ExecutionBlock.
        :type sbd_version: int
        """

        self._sbd_version = sbd_version
