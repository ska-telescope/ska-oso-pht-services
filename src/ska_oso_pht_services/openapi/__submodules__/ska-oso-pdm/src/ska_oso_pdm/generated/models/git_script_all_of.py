# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class GitScriptAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repo=None, branch=None, commit=None):  # noqa: E501
        """GitScriptAllOf - a model defined in OpenAPI

        :param repo: The repo of this GitScriptAllOf.  # noqa: E501
        :type repo: str
        :param branch: The branch of this GitScriptAllOf.  # noqa: E501
        :type branch: str
        :param commit: The commit of this GitScriptAllOf.  # noqa: E501
        :type commit: str
        """
        self.openapi_types = {
            'repo': str,
            'branch': str,
            'commit': str
        }

        self.attribute_map = {
            'repo': 'repo',
            'branch': 'branch',
            'commit': 'commit'
        }

        self._repo = repo
        self._branch = branch
        self._commit = commit

    @classmethod
    def from_dict(cls, dikt) -> 'GitScriptAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GitScript_allOf of this GitScriptAllOf.  # noqa: E501
        :rtype: GitScriptAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repo(self):
        """Gets the repo of this GitScriptAllOf.


        :return: The repo of this GitScriptAllOf.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this GitScriptAllOf.


        :param repo: The repo of this GitScriptAllOf.
        :type repo: str
        """
        if repo is None:
            raise ValueError("Invalid value for `repo`, must not be `None`")  # noqa: E501

        self._repo = repo

    @property
    def branch(self):
        """Gets the branch of this GitScriptAllOf.


        :return: The branch of this GitScriptAllOf.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this GitScriptAllOf.


        :param branch: The branch of this GitScriptAllOf.
        :type branch: str
        """

        self._branch = branch

    @property
    def commit(self):
        """Gets the commit of this GitScriptAllOf.


        :return: The commit of this GitScriptAllOf.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this GitScriptAllOf.


        :param commit: The commit of this GitScriptAllOf.
        :type commit: str
        """

        self._commit = commit
