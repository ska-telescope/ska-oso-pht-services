# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, name=None, version=None):  # noqa: E501
        """Workflow - a model defined in OpenAPI

        :param kind: The kind of this Workflow.  # noqa: E501
        :type kind: str
        :param name: The name of this Workflow.  # noqa: E501
        :type name: str
        :param version: The version of this Workflow.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'kind': str,
            'name': str,
            'version': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'name': 'name',
            'version': 'version'
        }

        self._kind = kind
        self._name = name
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workflow of this Workflow.  # noqa: E501
        :rtype: Workflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this Workflow.


        :return: The kind of this Workflow.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Workflow.


        :param kind: The kind of this Workflow.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Workflow.


        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this Workflow.


        :return: The version of this Workflow.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Workflow.


        :param version: The version of this Workflow.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
