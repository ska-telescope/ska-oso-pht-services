# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.filesystem_script import FilesystemScript
from ska_oso_pdm.generated.models.git_script import GitScript
from ska_oso_pdm.generated.models.inline_script import InlineScript
from ska_oso_pdm.generated.models.python_arguments import PythonArguments
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.filesystem_script import FilesystemScript  # noqa: E501
from ska_oso_pdm.generated.models.git_script import GitScript  # noqa: E501
from ska_oso_pdm.generated.models.inline_script import InlineScript  # noqa: E501
from ska_oso_pdm.generated.models.python_arguments import PythonArguments  # noqa: E501

class SBDefinitionActivitiesValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, function_args=None, content=None, path=None, repo=None, branch=None, commit=None):  # noqa: E501
        """SBDefinitionActivitiesValue - a model defined in OpenAPI

        :param kind: The kind of this SBDefinitionActivitiesValue.  # noqa: E501
        :type kind: str
        :param function_args: The function_args of this SBDefinitionActivitiesValue.  # noqa: E501
        :type function_args: Dict[str, PythonArguments]
        :param content: The content of this SBDefinitionActivitiesValue.  # noqa: E501
        :type content: str
        :param path: The path of this SBDefinitionActivitiesValue.  # noqa: E501
        :type path: str
        :param repo: The repo of this SBDefinitionActivitiesValue.  # noqa: E501
        :type repo: str
        :param branch: The branch of this SBDefinitionActivitiesValue.  # noqa: E501
        :type branch: str
        :param commit: The commit of this SBDefinitionActivitiesValue.  # noqa: E501
        :type commit: str
        """
        self.openapi_types = {
            'kind': str,
            'function_args': Dict[str, PythonArguments],
            'content': str,
            'path': str,
            'repo': str,
            'branch': str,
            'commit': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'function_args': 'function_args',
            'content': 'content',
            'path': 'path',
            'repo': 'repo',
            'branch': 'branch',
            'commit': 'commit'
        }

        self._kind = kind
        self._function_args = function_args
        self._content = content
        self._path = path
        self._repo = repo
        self._branch = branch
        self._commit = commit

    @classmethod
    def from_dict(cls, dikt) -> 'SBDefinitionActivitiesValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SBDefinition_activities_value of this SBDefinitionActivitiesValue.  # noqa: E501
        :rtype: SBDefinitionActivitiesValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SBDefinitionActivitiesValue.


        :return: The kind of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SBDefinitionActivitiesValue.


        :param kind: The kind of this SBDefinitionActivitiesValue.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def function_args(self):
        """Gets the function_args of this SBDefinitionActivitiesValue.


        :return: The function_args of this SBDefinitionActivitiesValue.
        :rtype: Dict[str, PythonArguments]
        """
        return self._function_args

    @function_args.setter
    def function_args(self, function_args):
        """Sets the function_args of this SBDefinitionActivitiesValue.


        :param function_args: The function_args of this SBDefinitionActivitiesValue.
        :type function_args: Dict[str, PythonArguments]
        """

        self._function_args = function_args

    @property
    def content(self):
        """Gets the content of this SBDefinitionActivitiesValue.


        :return: The content of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SBDefinitionActivitiesValue.


        :param content: The content of this SBDefinitionActivitiesValue.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def path(self):
        """Gets the path of this SBDefinitionActivitiesValue.


        :return: The path of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SBDefinitionActivitiesValue.


        :param path: The path of this SBDefinitionActivitiesValue.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def repo(self):
        """Gets the repo of this SBDefinitionActivitiesValue.


        :return: The repo of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this SBDefinitionActivitiesValue.


        :param repo: The repo of this SBDefinitionActivitiesValue.
        :type repo: str
        """
        if repo is None:
            raise ValueError("Invalid value for `repo`, must not be `None`")  # noqa: E501

        self._repo = repo

    @property
    def branch(self):
        """Gets the branch of this SBDefinitionActivitiesValue.


        :return: The branch of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SBDefinitionActivitiesValue.


        :param branch: The branch of this SBDefinitionActivitiesValue.
        :type branch: str
        """

        self._branch = branch

    @property
    def commit(self):
        """Gets the commit of this SBDefinitionActivitiesValue.


        :return: The commit of this SBDefinitionActivitiesValue.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this SBDefinitionActivitiesValue.


        :param commit: The commit of this SBDefinitionActivitiesValue.
        :type commit: str
        """

        self._commit = commit
