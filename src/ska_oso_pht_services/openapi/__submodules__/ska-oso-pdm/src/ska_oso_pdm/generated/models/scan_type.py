# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.channel import Channel
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.channel import Channel  # noqa: E501

class ScanType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scan_type_id=None, channels=None, target=None):  # noqa: E501
        """ScanType - a model defined in OpenAPI

        :param scan_type_id: The scan_type_id of this ScanType.  # noqa: E501
        :type scan_type_id: str
        :param channels: The channels of this ScanType.  # noqa: E501
        :type channels: List[Channel]
        :param target: The target of this ScanType.  # noqa: E501
        :type target: str
        """
        self.openapi_types = {
            'scan_type_id': str,
            'channels': List[Channel],
            'target': str
        }

        self.attribute_map = {
            'scan_type_id': 'scan_type_id',
            'channels': 'channels',
            'target': 'target'
        }

        self._scan_type_id = scan_type_id
        self._channels = channels
        self._target = target

    @classmethod
    def from_dict(cls, dikt) -> 'ScanType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScanType of this ScanType.  # noqa: E501
        :rtype: ScanType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scan_type_id(self):
        """Gets the scan_type_id of this ScanType.


        :return: The scan_type_id of this ScanType.
        :rtype: str
        """
        return self._scan_type_id

    @scan_type_id.setter
    def scan_type_id(self, scan_type_id):
        """Sets the scan_type_id of this ScanType.


        :param scan_type_id: The scan_type_id of this ScanType.
        :type scan_type_id: str
        """
        if scan_type_id is None:
            raise ValueError("Invalid value for `scan_type_id`, must not be `None`")  # noqa: E501

        self._scan_type_id = scan_type_id

    @property
    def channels(self):
        """Gets the channels of this ScanType.


        :return: The channels of this ScanType.
        :rtype: List[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ScanType.


        :param channels: The channels of this ScanType.
        :type channels: List[Channel]
        """

        self._channels = channels

    @property
    def target(self):
        """Gets the target of this ScanType.


        :return: The target of this ScanType.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ScanType.


        :param target: The target of this ScanType.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target
