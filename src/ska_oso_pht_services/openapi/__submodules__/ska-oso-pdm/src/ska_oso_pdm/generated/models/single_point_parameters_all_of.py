# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class SinglePointParametersAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset_x_arcsec=None, offset_y_arcsec=None):  # noqa: E501
        """SinglePointParametersAllOf - a model defined in OpenAPI

        :param offset_x_arcsec: The offset_x_arcsec of this SinglePointParametersAllOf.  # noqa: E501
        :type offset_x_arcsec: float
        :param offset_y_arcsec: The offset_y_arcsec of this SinglePointParametersAllOf.  # noqa: E501
        :type offset_y_arcsec: float
        """
        self.openapi_types = {
            'offset_x_arcsec': float,
            'offset_y_arcsec': float
        }

        self.attribute_map = {
            'offset_x_arcsec': 'offset_x_arcsec',
            'offset_y_arcsec': 'offset_y_arcsec'
        }

        self._offset_x_arcsec = offset_x_arcsec
        self._offset_y_arcsec = offset_y_arcsec

    @classmethod
    def from_dict(cls, dikt) -> 'SinglePointParametersAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SinglePointParameters_allOf of this SinglePointParametersAllOf.  # noqa: E501
        :rtype: SinglePointParametersAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset_x_arcsec(self):
        """Gets the offset_x_arcsec of this SinglePointParametersAllOf.


        :return: The offset_x_arcsec of this SinglePointParametersAllOf.
        :rtype: float
        """
        return self._offset_x_arcsec

    @offset_x_arcsec.setter
    def offset_x_arcsec(self, offset_x_arcsec):
        """Sets the offset_x_arcsec of this SinglePointParametersAllOf.


        :param offset_x_arcsec: The offset_x_arcsec of this SinglePointParametersAllOf.
        :type offset_x_arcsec: float
        """
        if offset_x_arcsec is None:
            raise ValueError("Invalid value for `offset_x_arcsec`, must not be `None`")  # noqa: E501

        self._offset_x_arcsec = offset_x_arcsec

    @property
    def offset_y_arcsec(self):
        """Gets the offset_y_arcsec of this SinglePointParametersAllOf.


        :return: The offset_y_arcsec of this SinglePointParametersAllOf.
        :rtype: float
        """
        return self._offset_y_arcsec

    @offset_y_arcsec.setter
    def offset_y_arcsec(self, offset_y_arcsec):
        """Sets the offset_y_arcsec of this SinglePointParametersAllOf.


        :param offset_y_arcsec: The offset_y_arcsec of this SinglePointParametersAllOf.
        :type offset_y_arcsec: float
        """
        if offset_y_arcsec is None:
            raise ValueError("Invalid value for `offset_y_arcsec`, must not be `None`")  # noqa: E501

        self._offset_y_arcsec = offset_y_arcsec
