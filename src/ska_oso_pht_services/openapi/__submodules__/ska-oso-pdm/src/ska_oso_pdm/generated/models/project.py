# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.author import Author
from ska_oso_pdm.generated.models.metadata import Metadata
from ska_oso_pdm.generated.models.observing_programme import ObservingProgramme
from ska_oso_pdm.generated.models.telescope import Telescope
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.author import Author  # noqa: E501
from ska_oso_pdm.generated.models.metadata import Metadata  # noqa: E501
from ska_oso_pdm.generated.models.observing_programme import ObservingProgramme  # noqa: E501
from ska_oso_pdm.generated.models.telescope import Telescope  # noqa: E501

class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interface=None, prj_id=None, metadata=None, telescope=None, author=None, obs_programmes=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param interface: The interface of this Project.  # noqa: E501
        :type interface: str
        :param prj_id: The prj_id of this Project.  # noqa: E501
        :type prj_id: str
        :param metadata: The metadata of this Project.  # noqa: E501
        :type metadata: Metadata
        :param telescope: The telescope of this Project.  # noqa: E501
        :type telescope: Telescope
        :param author: The author of this Project.  # noqa: E501
        :type author: Author
        :param obs_programmes: The obs_programmes of this Project.  # noqa: E501
        :type obs_programmes: List[ObservingProgramme]
        """
        self.openapi_types = {
            'interface': str,
            'prj_id': str,
            'metadata': Metadata,
            'telescope': Telescope,
            'author': Author,
            'obs_programmes': List[ObservingProgramme]
        }

        self.attribute_map = {
            'interface': 'interface',
            'prj_id': 'prj_id',
            'metadata': 'metadata',
            'telescope': 'telescope',
            'author': 'author',
            'obs_programmes': 'obs_programmes'
        }

        self._interface = interface
        self._prj_id = prj_id
        self._metadata = metadata
        self._telescope = telescope
        self._author = author
        self._obs_programmes = obs_programmes

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface(self):
        """Gets the interface of this Project.


        :return: The interface of this Project.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Project.


        :param interface: The interface of this Project.
        :type interface: str
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def prj_id(self):
        """Gets the prj_id of this Project.


        :return: The prj_id of this Project.
        :rtype: str
        """
        return self._prj_id

    @prj_id.setter
    def prj_id(self, prj_id):
        """Sets the prj_id of this Project.


        :param prj_id: The prj_id of this Project.
        :type prj_id: str
        """
        if prj_id is None:
            raise ValueError("Invalid value for `prj_id`, must not be `None`")  # noqa: E501

        self._prj_id = prj_id

    @property
    def metadata(self):
        """Gets the metadata of this Project.


        :return: The metadata of this Project.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Project.


        :param metadata: The metadata of this Project.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def telescope(self):
        """Gets the telescope of this Project.


        :return: The telescope of this Project.
        :rtype: Telescope
        """
        return self._telescope

    @telescope.setter
    def telescope(self, telescope):
        """Sets the telescope of this Project.


        :param telescope: The telescope of this Project.
        :type telescope: Telescope
        """
        if telescope is None:
            raise ValueError("Invalid value for `telescope`, must not be `None`")  # noqa: E501

        self._telescope = telescope

    @property
    def author(self):
        """Gets the author of this Project.


        :return: The author of this Project.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Project.


        :param author: The author of this Project.
        :type author: Author
        """

        self._author = author

    @property
    def obs_programmes(self):
        """Gets the obs_programmes of this Project.


        :return: The obs_programmes of this Project.
        :rtype: List[ObservingProgramme]
        """
        return self._obs_programmes

    @obs_programmes.setter
    def obs_programmes(self, obs_programmes):
        """Sets the obs_programmes of this Project.


        :param obs_programmes: The obs_programmes of this Project.
        :type obs_programmes: List[ObservingProgramme]
        """

        self._obs_programmes = obs_programmes
