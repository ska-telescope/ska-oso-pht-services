# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.python_arguments import PythonArguments
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.python_arguments import PythonArguments  # noqa: E501

class PythonProcedure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, function_args=None):  # noqa: E501
        """PythonProcedure - a model defined in OpenAPI

        :param kind: The kind of this PythonProcedure.  # noqa: E501
        :type kind: str
        :param function_args: The function_args of this PythonProcedure.  # noqa: E501
        :type function_args: Dict[str, PythonArguments]
        """
        self.openapi_types = {
            'kind': str,
            'function_args': Dict[str, PythonArguments]
        }

        self.attribute_map = {
            'kind': 'kind',
            'function_args': 'function_args'
        }

        self._kind = kind
        self._function_args = function_args

    @classmethod
    def from_dict(cls, dikt) -> 'PythonProcedure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PythonProcedure of this PythonProcedure.  # noqa: E501
        :rtype: PythonProcedure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this PythonProcedure.


        :return: The kind of this PythonProcedure.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PythonProcedure.


        :param kind: The kind of this PythonProcedure.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def function_args(self):
        """Gets the function_args of this PythonProcedure.


        :return: The function_args of this PythonProcedure.
        :rtype: Dict[str, PythonArguments]
        """
        return self._function_args

    @function_args.setter
    def function_args(self, function_args):
        """Sets the function_args of this PythonProcedure.


        :param function_args: The function_args of this PythonProcedure.
        :type function_args: Dict[str, PythonArguments]
        """

        self._function_args = function_args
