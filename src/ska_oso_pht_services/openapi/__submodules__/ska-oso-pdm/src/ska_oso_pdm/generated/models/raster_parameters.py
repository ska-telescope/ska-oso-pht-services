# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters  # noqa: E501

class RasterParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, row_length_arcsec=None, row_offset_arcsec=None, n_rows=None, pa=None, unidirectional=None):  # noqa: E501
        """RasterParameters - a model defined in OpenAPI

        :param kind: The kind of this RasterParameters.  # noqa: E501
        :type kind: str
        :param row_length_arcsec: The row_length_arcsec of this RasterParameters.  # noqa: E501
        :type row_length_arcsec: float
        :param row_offset_arcsec: The row_offset_arcsec of this RasterParameters.  # noqa: E501
        :type row_offset_arcsec: float
        :param n_rows: The n_rows of this RasterParameters.  # noqa: E501
        :type n_rows: int
        :param pa: The pa of this RasterParameters.  # noqa: E501
        :type pa: float
        :param unidirectional: The unidirectional of this RasterParameters.  # noqa: E501
        :type unidirectional: bool
        """
        self.openapi_types = {
            'kind': str,
            'row_length_arcsec': float,
            'row_offset_arcsec': float,
            'n_rows': int,
            'pa': float,
            'unidirectional': bool
        }

        self.attribute_map = {
            'kind': 'kind',
            'row_length_arcsec': 'row_length_arcsec',
            'row_offset_arcsec': 'row_offset_arcsec',
            'n_rows': 'n_rows',
            'pa': 'pa',
            'unidirectional': 'unidirectional'
        }

        self._kind = kind
        self._row_length_arcsec = row_length_arcsec
        self._row_offset_arcsec = row_offset_arcsec
        self._n_rows = n_rows
        self._pa = pa
        self._unidirectional = unidirectional

    @classmethod
    def from_dict(cls, dikt) -> 'RasterParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RasterParameters of this RasterParameters.  # noqa: E501
        :rtype: RasterParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this RasterParameters.


        :return: The kind of this RasterParameters.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RasterParameters.


        :param kind: The kind of this RasterParameters.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def row_length_arcsec(self):
        """Gets the row_length_arcsec of this RasterParameters.


        :return: The row_length_arcsec of this RasterParameters.
        :rtype: float
        """
        return self._row_length_arcsec

    @row_length_arcsec.setter
    def row_length_arcsec(self, row_length_arcsec):
        """Sets the row_length_arcsec of this RasterParameters.


        :param row_length_arcsec: The row_length_arcsec of this RasterParameters.
        :type row_length_arcsec: float
        """
        if row_length_arcsec is None:
            raise ValueError("Invalid value for `row_length_arcsec`, must not be `None`")  # noqa: E501

        self._row_length_arcsec = row_length_arcsec

    @property
    def row_offset_arcsec(self):
        """Gets the row_offset_arcsec of this RasterParameters.


        :return: The row_offset_arcsec of this RasterParameters.
        :rtype: float
        """
        return self._row_offset_arcsec

    @row_offset_arcsec.setter
    def row_offset_arcsec(self, row_offset_arcsec):
        """Sets the row_offset_arcsec of this RasterParameters.


        :param row_offset_arcsec: The row_offset_arcsec of this RasterParameters.
        :type row_offset_arcsec: float
        """
        if row_offset_arcsec is None:
            raise ValueError("Invalid value for `row_offset_arcsec`, must not be `None`")  # noqa: E501

        self._row_offset_arcsec = row_offset_arcsec

    @property
    def n_rows(self):
        """Gets the n_rows of this RasterParameters.


        :return: The n_rows of this RasterParameters.
        :rtype: int
        """
        return self._n_rows

    @n_rows.setter
    def n_rows(self, n_rows):
        """Sets the n_rows of this RasterParameters.


        :param n_rows: The n_rows of this RasterParameters.
        :type n_rows: int
        """
        if n_rows is None:
            raise ValueError("Invalid value for `n_rows`, must not be `None`")  # noqa: E501

        self._n_rows = n_rows

    @property
    def pa(self):
        """Gets the pa of this RasterParameters.


        :return: The pa of this RasterParameters.
        :rtype: float
        """
        return self._pa

    @pa.setter
    def pa(self, pa):
        """Sets the pa of this RasterParameters.


        :param pa: The pa of this RasterParameters.
        :type pa: float
        """
        if pa is None:
            raise ValueError("Invalid value for `pa`, must not be `None`")  # noqa: E501

        self._pa = pa

    @property
    def unidirectional(self):
        """Gets the unidirectional of this RasterParameters.


        :return: The unidirectional of this RasterParameters.
        :rtype: bool
        """
        return self._unidirectional

    @unidirectional.setter
    def unidirectional(self, unidirectional):
        """Sets the unidirectional of this RasterParameters.


        :param unidirectional: The unidirectional of this RasterParameters.
        :type unidirectional: bool
        """
        if unidirectional is None:
            raise ValueError("Invalid value for `unidirectional`, must not be `None`")  # noqa: E501

        self._unidirectional = unidirectional
