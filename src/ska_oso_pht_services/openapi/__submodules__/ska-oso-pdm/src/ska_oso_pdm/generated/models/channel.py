# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, link_map=None, start=None, freq_min=None, freq_max=None, stride=None):  # noqa: E501
        """Channel - a model defined in OpenAPI

        :param count: The count of this Channel.  # noqa: E501
        :type count: int
        :param link_map: The link_map of this Channel.  # noqa: E501
        :type link_map: List[List[int]]
        :param start: The start of this Channel.  # noqa: E501
        :type start: int
        :param freq_min: The freq_min of this Channel.  # noqa: E501
        :type freq_min: float
        :param freq_max: The freq_max of this Channel.  # noqa: E501
        :type freq_max: float
        :param stride: The stride of this Channel.  # noqa: E501
        :type stride: int
        """
        self.openapi_types = {
            'count': int,
            'link_map': List[List[int]],
            'start': int,
            'freq_min': float,
            'freq_max': float,
            'stride': int
        }

        self.attribute_map = {
            'count': 'count',
            'link_map': 'link_map',
            'start': 'start',
            'freq_min': 'freq_min',
            'freq_max': 'freq_max',
            'stride': 'stride'
        }

        self._count = count
        self._link_map = link_map
        self._start = start
        self._freq_min = freq_min
        self._freq_max = freq_max
        self._stride = stride

    @classmethod
    def from_dict(cls, dikt) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Channel of this Channel.  # noqa: E501
        :rtype: Channel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Channel.


        :return: The count of this Channel.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Channel.


        :param count: The count of this Channel.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def link_map(self):
        """Gets the link_map of this Channel.


        :return: The link_map of this Channel.
        :rtype: List[List[int]]
        """
        return self._link_map

    @link_map.setter
    def link_map(self, link_map):
        """Sets the link_map of this Channel.


        :param link_map: The link_map of this Channel.
        :type link_map: List[List[int]]
        """
        if link_map is None:
            raise ValueError("Invalid value for `link_map`, must not be `None`")  # noqa: E501

        self._link_map = link_map

    @property
    def start(self):
        """Gets the start of this Channel.


        :return: The start of this Channel.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Channel.


        :param start: The start of this Channel.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def freq_min(self):
        """Gets the freq_min of this Channel.


        :return: The freq_min of this Channel.
        :rtype: float
        """
        return self._freq_min

    @freq_min.setter
    def freq_min(self, freq_min):
        """Sets the freq_min of this Channel.


        :param freq_min: The freq_min of this Channel.
        :type freq_min: float
        """
        if freq_min is None:
            raise ValueError("Invalid value for `freq_min`, must not be `None`")  # noqa: E501

        self._freq_min = freq_min

    @property
    def freq_max(self):
        """Gets the freq_max of this Channel.


        :return: The freq_max of this Channel.
        :rtype: float
        """
        return self._freq_max

    @freq_max.setter
    def freq_max(self, freq_max):
        """Sets the freq_max of this Channel.


        :param freq_max: The freq_max of this Channel.
        :type freq_max: float
        """
        if freq_max is None:
            raise ValueError("Invalid value for `freq_max`, must not be `None`")  # noqa: E501

        self._freq_max = freq_max

    @property
    def stride(self):
        """Gets the stride of this Channel.


        :return: The stride of this Channel.
        :rtype: int
        """
        return self._stride

    @stride.setter
    def stride(self, stride):
        """Sets the stride of this Channel.


        :param stride: The stride of this Channel.
        :type stride: int
        """
        if stride is None:
            raise ValueError("Invalid value for `stride`, must not be `None`")  # noqa: E501

        self._stride = stride
