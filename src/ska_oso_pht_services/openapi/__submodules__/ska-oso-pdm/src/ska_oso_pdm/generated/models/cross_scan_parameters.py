# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.pointing_pattern_parameters import PointingPatternParameters  # noqa: E501

class CrossScanParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, offset_arcsec=None):  # noqa: E501
        """CrossScanParameters - a model defined in OpenAPI

        :param kind: The kind of this CrossScanParameters.  # noqa: E501
        :type kind: str
        :param offset_arcsec: The offset_arcsec of this CrossScanParameters.  # noqa: E501
        :type offset_arcsec: float
        """
        self.openapi_types = {
            'kind': str,
            'offset_arcsec': float
        }

        self.attribute_map = {
            'kind': 'kind',
            'offset_arcsec': 'offset_arcsec'
        }

        self._kind = kind
        self._offset_arcsec = offset_arcsec

    @classmethod
    def from_dict(cls, dikt) -> 'CrossScanParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CrossScanParameters of this CrossScanParameters.  # noqa: E501
        :rtype: CrossScanParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this CrossScanParameters.


        :return: The kind of this CrossScanParameters.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CrossScanParameters.


        :param kind: The kind of this CrossScanParameters.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def offset_arcsec(self):
        """Gets the offset_arcsec of this CrossScanParameters.


        :return: The offset_arcsec of this CrossScanParameters.
        :rtype: float
        """
        return self._offset_arcsec

    @offset_arcsec.setter
    def offset_arcsec(self, offset_arcsec):
        """Sets the offset_arcsec of this CrossScanParameters.


        :param offset_arcsec: The offset_arcsec of this CrossScanParameters.
        :type offset_arcsec: float
        """
        if offset_arcsec is None:
            raise ValueError("Invalid value for `offset_arcsec`, must not be `None`")  # noqa: E501

        self._offset_arcsec = offset_arcsec
