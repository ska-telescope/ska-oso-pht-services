# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ska_oso_pdm.generated.models.base_model_ import Model
from ska_oso_pdm.generated.models.csp_configuration import CSPConfiguration
from ska_oso_pdm.generated.models.dish_allocation import DishAllocation
from ska_oso_pdm.generated.models.dish_configuration import DishConfiguration
from ska_oso_pdm.generated.models.mccs_allocation import MCCSAllocation
from ska_oso_pdm.generated.models.metadata import Metadata
from ska_oso_pdm.generated.models.sb_definition_activities_value import SBDefinitionActivitiesValue
from ska_oso_pdm.generated.models.sdp_configuration import SDPConfiguration
from ska_oso_pdm.generated.models.scan_definition import ScanDefinition
from ska_oso_pdm.generated.models.subarray_beam_configuration import SubarrayBeamConfiguration
from ska_oso_pdm.generated.models.target import Target
from ska_oso_pdm.generated.models.target_beam_configuration import TargetBeamConfiguration
from ska_oso_pdm.generated.models.telescope import Telescope
from ska_oso_pdm.generated import util

from ska_oso_pdm.generated.models.csp_configuration import CSPConfiguration  # noqa: E501
from ska_oso_pdm.generated.models.dish_allocation import DishAllocation  # noqa: E501
from ska_oso_pdm.generated.models.dish_configuration import DishConfiguration  # noqa: E501
from ska_oso_pdm.generated.models.mccs_allocation import MCCSAllocation  # noqa: E501
from ska_oso_pdm.generated.models.metadata import Metadata  # noqa: E501
from ska_oso_pdm.generated.models.sb_definition_activities_value import SBDefinitionActivitiesValue  # noqa: E501
from ska_oso_pdm.generated.models.scan_definition import ScanDefinition  # noqa: E501
from ska_oso_pdm.generated.models.sdp_configuration import SDPConfiguration  # noqa: E501
from ska_oso_pdm.generated.models.subarray_beam_configuration import SubarrayBeamConfiguration  # noqa: E501
from ska_oso_pdm.generated.models.target import Target  # noqa: E501
from ska_oso_pdm.generated.models.target_beam_configuration import TargetBeamConfiguration  # noqa: E501
from ska_oso_pdm.generated.models.telescope import Telescope  # noqa: E501

class SBDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interface=None, sbd_id=None, metadata=None, telescope=None, activities=None, dish_allocations=None, mccs_allocation=None, sdp_configuration=None, csp_configurations=None, subarray_beam_configurations=None, targets=None, dish_configurations=None, target_beam_configurations=None, scan_definitions=None, scan_sequence=None):  # noqa: E501
        """SBDefinition - a model defined in OpenAPI

        :param interface: The interface of this SBDefinition.  # noqa: E501
        :type interface: str
        :param sbd_id: The sbd_id of this SBDefinition.  # noqa: E501
        :type sbd_id: str
        :param metadata: The metadata of this SBDefinition.  # noqa: E501
        :type metadata: Metadata
        :param telescope: The telescope of this SBDefinition.  # noqa: E501
        :type telescope: Telescope
        :param activities: The activities of this SBDefinition.  # noqa: E501
        :type activities: Dict[str, SBDefinitionActivitiesValue]
        :param dish_allocations: The dish_allocations of this SBDefinition.  # noqa: E501
        :type dish_allocations: DishAllocation
        :param mccs_allocation: The mccs_allocation of this SBDefinition.  # noqa: E501
        :type mccs_allocation: MCCSAllocation
        :param sdp_configuration: The sdp_configuration of this SBDefinition.  # noqa: E501
        :type sdp_configuration: SDPConfiguration
        :param csp_configurations: The csp_configurations of this SBDefinition.  # noqa: E501
        :type csp_configurations: List[CSPConfiguration]
        :param subarray_beam_configurations: The subarray_beam_configurations of this SBDefinition.  # noqa: E501
        :type subarray_beam_configurations: List[SubarrayBeamConfiguration]
        :param targets: The targets of this SBDefinition.  # noqa: E501
        :type targets: List[Target]
        :param dish_configurations: The dish_configurations of this SBDefinition.  # noqa: E501
        :type dish_configurations: List[DishConfiguration]
        :param target_beam_configurations: The target_beam_configurations of this SBDefinition.  # noqa: E501
        :type target_beam_configurations: List[TargetBeamConfiguration]
        :param scan_definitions: The scan_definitions of this SBDefinition.  # noqa: E501
        :type scan_definitions: List[ScanDefinition]
        :param scan_sequence: The scan_sequence of this SBDefinition.  # noqa: E501
        :type scan_sequence: List[str]
        """
        self.openapi_types = {
            'interface': str,
            'sbd_id': str,
            'metadata': Metadata,
            'telescope': Telescope,
            'activities': Dict[str, SBDefinitionActivitiesValue],
            'dish_allocations': DishAllocation,
            'mccs_allocation': MCCSAllocation,
            'sdp_configuration': SDPConfiguration,
            'csp_configurations': List[CSPConfiguration],
            'subarray_beam_configurations': List[SubarrayBeamConfiguration],
            'targets': List[Target],
            'dish_configurations': List[DishConfiguration],
            'target_beam_configurations': List[TargetBeamConfiguration],
            'scan_definitions': List[ScanDefinition],
            'scan_sequence': List[str]
        }

        self.attribute_map = {
            'interface': 'interface',
            'sbd_id': 'sbd_id',
            'metadata': 'metadata',
            'telescope': 'telescope',
            'activities': 'activities',
            'dish_allocations': 'dish_allocations',
            'mccs_allocation': 'mccs_allocation',
            'sdp_configuration': 'sdp_configuration',
            'csp_configurations': 'csp_configurations',
            'subarray_beam_configurations': 'subarray_beam_configurations',
            'targets': 'targets',
            'dish_configurations': 'dish_configurations',
            'target_beam_configurations': 'target_beam_configurations',
            'scan_definitions': 'scan_definitions',
            'scan_sequence': 'scan_sequence'
        }

        self._interface = interface
        self._sbd_id = sbd_id
        self._metadata = metadata
        self._telescope = telescope
        self._activities = activities
        self._dish_allocations = dish_allocations
        self._mccs_allocation = mccs_allocation
        self._sdp_configuration = sdp_configuration
        self._csp_configurations = csp_configurations
        self._subarray_beam_configurations = subarray_beam_configurations
        self._targets = targets
        self._dish_configurations = dish_configurations
        self._target_beam_configurations = target_beam_configurations
        self._scan_definitions = scan_definitions
        self._scan_sequence = scan_sequence

    @classmethod
    def from_dict(cls, dikt) -> 'SBDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SBDefinition of this SBDefinition.  # noqa: E501
        :rtype: SBDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface(self):
        """Gets the interface of this SBDefinition.


        :return: The interface of this SBDefinition.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this SBDefinition.


        :param interface: The interface of this SBDefinition.
        :type interface: str
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def sbd_id(self):
        """Gets the sbd_id of this SBDefinition.


        :return: The sbd_id of this SBDefinition.
        :rtype: str
        """
        return self._sbd_id

    @sbd_id.setter
    def sbd_id(self, sbd_id):
        """Sets the sbd_id of this SBDefinition.


        :param sbd_id: The sbd_id of this SBDefinition.
        :type sbd_id: str
        """
        if sbd_id is None:
            raise ValueError("Invalid value for `sbd_id`, must not be `None`")  # noqa: E501

        self._sbd_id = sbd_id

    @property
    def metadata(self):
        """Gets the metadata of this SBDefinition.


        :return: The metadata of this SBDefinition.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SBDefinition.


        :param metadata: The metadata of this SBDefinition.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def telescope(self):
        """Gets the telescope of this SBDefinition.


        :return: The telescope of this SBDefinition.
        :rtype: Telescope
        """
        return self._telescope

    @telescope.setter
    def telescope(self, telescope):
        """Sets the telescope of this SBDefinition.


        :param telescope: The telescope of this SBDefinition.
        :type telescope: Telescope
        """
        if telescope is None:
            raise ValueError("Invalid value for `telescope`, must not be `None`")  # noqa: E501

        self._telescope = telescope

    @property
    def activities(self):
        """Gets the activities of this SBDefinition.


        :return: The activities of this SBDefinition.
        :rtype: Dict[str, SBDefinitionActivitiesValue]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this SBDefinition.


        :param activities: The activities of this SBDefinition.
        :type activities: Dict[str, SBDefinitionActivitiesValue]
        """

        self._activities = activities

    @property
    def dish_allocations(self):
        """Gets the dish_allocations of this SBDefinition.


        :return: The dish_allocations of this SBDefinition.
        :rtype: DishAllocation
        """
        return self._dish_allocations

    @dish_allocations.setter
    def dish_allocations(self, dish_allocations):
        """Sets the dish_allocations of this SBDefinition.


        :param dish_allocations: The dish_allocations of this SBDefinition.
        :type dish_allocations: DishAllocation
        """

        self._dish_allocations = dish_allocations

    @property
    def mccs_allocation(self):
        """Gets the mccs_allocation of this SBDefinition.


        :return: The mccs_allocation of this SBDefinition.
        :rtype: MCCSAllocation
        """
        return self._mccs_allocation

    @mccs_allocation.setter
    def mccs_allocation(self, mccs_allocation):
        """Sets the mccs_allocation of this SBDefinition.


        :param mccs_allocation: The mccs_allocation of this SBDefinition.
        :type mccs_allocation: MCCSAllocation
        """

        self._mccs_allocation = mccs_allocation

    @property
    def sdp_configuration(self):
        """Gets the sdp_configuration of this SBDefinition.


        :return: The sdp_configuration of this SBDefinition.
        :rtype: SDPConfiguration
        """
        return self._sdp_configuration

    @sdp_configuration.setter
    def sdp_configuration(self, sdp_configuration):
        """Sets the sdp_configuration of this SBDefinition.


        :param sdp_configuration: The sdp_configuration of this SBDefinition.
        :type sdp_configuration: SDPConfiguration
        """

        self._sdp_configuration = sdp_configuration

    @property
    def csp_configurations(self):
        """Gets the csp_configurations of this SBDefinition.


        :return: The csp_configurations of this SBDefinition.
        :rtype: List[CSPConfiguration]
        """
        return self._csp_configurations

    @csp_configurations.setter
    def csp_configurations(self, csp_configurations):
        """Sets the csp_configurations of this SBDefinition.


        :param csp_configurations: The csp_configurations of this SBDefinition.
        :type csp_configurations: List[CSPConfiguration]
        """

        self._csp_configurations = csp_configurations

    @property
    def subarray_beam_configurations(self):
        """Gets the subarray_beam_configurations of this SBDefinition.


        :return: The subarray_beam_configurations of this SBDefinition.
        :rtype: List[SubarrayBeamConfiguration]
        """
        return self._subarray_beam_configurations

    @subarray_beam_configurations.setter
    def subarray_beam_configurations(self, subarray_beam_configurations):
        """Sets the subarray_beam_configurations of this SBDefinition.


        :param subarray_beam_configurations: The subarray_beam_configurations of this SBDefinition.
        :type subarray_beam_configurations: List[SubarrayBeamConfiguration]
        """

        self._subarray_beam_configurations = subarray_beam_configurations

    @property
    def targets(self):
        """Gets the targets of this SBDefinition.


        :return: The targets of this SBDefinition.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this SBDefinition.


        :param targets: The targets of this SBDefinition.
        :type targets: List[Target]
        """

        self._targets = targets

    @property
    def dish_configurations(self):
        """Gets the dish_configurations of this SBDefinition.


        :return: The dish_configurations of this SBDefinition.
        :rtype: List[DishConfiguration]
        """
        return self._dish_configurations

    @dish_configurations.setter
    def dish_configurations(self, dish_configurations):
        """Sets the dish_configurations of this SBDefinition.


        :param dish_configurations: The dish_configurations of this SBDefinition.
        :type dish_configurations: List[DishConfiguration]
        """

        self._dish_configurations = dish_configurations

    @property
    def target_beam_configurations(self):
        """Gets the target_beam_configurations of this SBDefinition.


        :return: The target_beam_configurations of this SBDefinition.
        :rtype: List[TargetBeamConfiguration]
        """
        return self._target_beam_configurations

    @target_beam_configurations.setter
    def target_beam_configurations(self, target_beam_configurations):
        """Sets the target_beam_configurations of this SBDefinition.


        :param target_beam_configurations: The target_beam_configurations of this SBDefinition.
        :type target_beam_configurations: List[TargetBeamConfiguration]
        """

        self._target_beam_configurations = target_beam_configurations

    @property
    def scan_definitions(self):
        """Gets the scan_definitions of this SBDefinition.


        :return: The scan_definitions of this SBDefinition.
        :rtype: List[ScanDefinition]
        """
        return self._scan_definitions

    @scan_definitions.setter
    def scan_definitions(self, scan_definitions):
        """Sets the scan_definitions of this SBDefinition.


        :param scan_definitions: The scan_definitions of this SBDefinition.
        :type scan_definitions: List[ScanDefinition]
        """

        self._scan_definitions = scan_definitions

    @property
    def scan_sequence(self):
        """Gets the scan_sequence of this SBDefinition.


        :return: The scan_sequence of this SBDefinition.
        :rtype: List[str]
        """
        return self._scan_sequence

    @scan_sequence.setter
    def scan_sequence(self, scan_sequence):
        """Sets the scan_sequence of this SBDefinition.


        :param scan_sequence: The scan_sequence of this SBDefinition.
        :type scan_sequence: List[str]
        """

        self._scan_sequence = scan_sequence
